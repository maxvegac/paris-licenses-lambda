name: Deploy to AWS Lambda

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: paris-licenses

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm run test
      
    - name: Build application
      run: npm run build

  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: 1.6.0
        
    - name: Setup Terraform Backend
      run: |
        # Create S3 bucket for Terraform state if it doesn't exist
        STATE_BUCKET="${{ env.PROJECT_NAME }}-terraform-state"
        echo "STATE_BUCKET=$STATE_BUCKET" >> $GITHUB_ENV
        
        # Check if bucket exists, create if not
        if ! aws s3 ls "s3://$STATE_BUCKET" 2>&1 | grep -q 'NoSuchBucket'; then
          echo "✅ S3 bucket $STATE_BUCKET already exists"
        else
          echo "📦 Creating S3 bucket for Terraform state..."
          aws s3 mb s3://$STATE_BUCKET --region ${{ env.AWS_REGION }}
          
          # Enable versioning
          aws s3api put-bucket-versioning \
            --bucket $STATE_BUCKET \
            --versioning-configuration Status=Enabled
          
          # Enable encryption
          aws s3api put-bucket-encryption \
            --bucket $STATE_BUCKET \
            --server-side-encryption-configuration '{
              "Rules": [{
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }]
            }'
          
          # Block public access
          aws s3api put-public-access-block \
            --bucket $STATE_BUCKET \
            --public-access-block-configuration \
            BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
        fi
        
        # Create DynamoDB table for state locking if it doesn't exist
        if ! aws dynamodb describe-table --table-name terraform-state-lock --region ${{ env.AWS_REGION }} 2>&1 | grep -q 'ResourceNotFoundException'; then
          echo "✅ DynamoDB table terraform-state-lock already exists"
        else
          echo "🔒 Creating DynamoDB table for state locking..."
          aws dynamodb create-table \
            --table-name terraform-state-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region ${{ env.AWS_REGION }}
          
          # Wait for table to be created
          aws dynamodb wait table-exists --table-name terraform-state-lock --region ${{ env.AWS_REGION }}
        fi
        
    - name: Deploy with OpenTofu
      run: |
        chmod +x deploy.sh
        # Set backend configuration for the script
        export TF_BACKEND_BUCKET="$STATE_BUCKET"
        export TF_BACKEND_KEY="${{ env.PROJECT_NAME }}/terraform.tfstate"
        export TF_BACKEND_REGION="${{ env.AWS_REGION }}"
        export TF_BACKEND_DYNAMODB_TABLE="terraform-state-lock"
        
        # Set Paris API credentials from GitHub Secrets
        export TF_VAR_paris_api_email="${{ secrets.PARIS_API_EMAIL }}"
        export TF_VAR_paris_api_password="${{ secrets.PARIS_API_PASSWORD }}"
        
        echo "🔍 Debug: STATE_BUCKET = $STATE_BUCKET"
        echo "🔍 Debug: TF_BACKEND_BUCKET = $TF_BACKEND_BUCKET"
        echo "🔍 Debug: TF_BACKEND_KEY = $TF_BACKEND_KEY"
        echo "🔍 Debug: TF_BACKEND_REGION = $TF_BACKEND_REGION"
        echo "🔍 Debug: TF_BACKEND_DYNAMODB_TABLE = $TF_BACKEND_DYNAMODB_TABLE"
        echo "🔍 Debug: Paris API credentials configured from GitHub Secrets"
        
        ./deploy.sh dev ${{ env.PROJECT_NAME }} --ci
        
    - name: Get Lambda Function URL
      run: |
        echo "API_URL=$(cd terraform && tofu output -raw lambda_function_url)" >> $GITHUB_ENV
        
    - name: Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment completed for DEV**\n\nAPI URL: ${{ env.API_URL }}`
          })

  deploy-prod:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '22'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: 1.6.0
        
    - name: Setup Terraform Backend
      run: |
        # Create S3 bucket for Terraform state if it doesn't exist
        STATE_BUCKET="${{ env.PROJECT_NAME }}-terraform-state-prod"
        echo "STATE_BUCKET=$STATE_BUCKET" >> $GITHUB_ENV
        
        # Check if bucket exists, create if not
        if ! aws s3 ls "s3://$STATE_BUCKET" 2>&1 | grep -q 'NoSuchBucket'; then
          echo "✅ S3 bucket $STATE_BUCKET already exists"
        else
          echo "📦 Creating S3 bucket for Terraform state..."
          aws s3 mb s3://$STATE_BUCKET --region ${{ env.AWS_REGION }}
          
          # Enable versioning
          aws s3api put-bucket-versioning \
            --bucket $STATE_BUCKET \
            --versioning-configuration Status=Enabled
          
          # Enable encryption
          aws s3api put-bucket-encryption \
            --bucket $STATE_BUCKET \
            --server-side-encryption-configuration '{
              "Rules": [{
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }]
            }'
          
          # Block public access
          aws s3api put-public-access-block \
            --bucket $STATE_BUCKET \
            --public-access-block-configuration \
            BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
        fi
        
        # Create DynamoDB table for state locking if it doesn't exist
        if ! aws dynamodb describe-table --table-name terraform-state-lock --region ${{ env.AWS_REGION }} 2>&1 | grep -q 'ResourceNotFoundException'; then
          echo "✅ DynamoDB table terraform-state-lock already exists"
        else
          echo "🔒 Creating DynamoDB table for state locking..."
          aws dynamodb create-table \
            --table-name terraform-state-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region ${{ env.AWS_REGION }}
          
          # Wait for table to be created
          aws dynamodb wait table-exists --table-name terraform-state-lock --region ${{ env.AWS_REGION }}
        fi
        
    - name: Deploy with OpenTofu
      run: |
        chmod +x deploy.sh
        # Set backend configuration for the script
        export TF_BACKEND_BUCKET="$STATE_BUCKET"
        export TF_BACKEND_KEY="${{ env.PROJECT_NAME }}/terraform.tfstate"
        export TF_BACKEND_REGION="${{ env.AWS_REGION }}"
        export TF_BACKEND_DYNAMODB_TABLE="terraform-state-lock"
        
        # Set Paris API credentials from GitHub Secrets
        export TF_VAR_paris_api_email="${{ secrets.PARIS_API_EMAIL }}"
        export TF_VAR_paris_api_password="${{ secrets.PARIS_API_PASSWORD }}"
        
        echo "🔍 Debug: STATE_BUCKET = $STATE_BUCKET"
        echo "🔍 Debug: TF_BACKEND_BUCKET = $TF_BACKEND_BUCKET"
        echo "🔍 Debug: TF_BACKEND_KEY = $TF_BACKEND_KEY"
        echo "🔍 Debug: TF_BACKEND_REGION = $TF_BACKEND_REGION"
        echo "🔍 Debug: TF_BACKEND_DYNAMODB_TABLE = $TF_BACKEND_DYNAMODB_TABLE"
        echo "🔍 Debug: Paris API credentials configured from GitHub Secrets"
        
        ./deploy.sh prod ${{ env.PROJECT_NAME }} --ci
        
    - name: Get Lambda Function URL
      run: |
        echo "API_URL=$(cd terraform && tofu output -raw lambda_function_url)" >> $GITHUB_ENV
        